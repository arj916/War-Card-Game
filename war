
import random

#object class holding the information of a single card in a standard deck
class Card:

    #constructor with card value(1-13), suit(1-4), and rank(1-13)
    def __init__(self,value,suit, rank):
        self.value = value
        self.suit = suit
        self.rank = rank

    #determines the related suit name when given the number (1-4) from constructor
    # parameter: num:int -> number related to suit of card
    def determine_suit(self,num):
        if num == 1:
            return "Spade"
        elif num == 2:
            return "Heart"
        elif num == 3:
            return "Diamond"
        elif num == 4:
            return "Club"

    #determines the related rank name when given the number (1-13) from constructor
    # parameter: num:int -> number related to rank of card
    def determine_rank(self,num):
        if num == 1:
            return "Ace"
        elif num == 11:
            return "Jack"
        elif num == 12:
            return "Queen"
        elif num == 4:
            return "King"
        else:
            return str(num)
    
    #returns the image symbol for the suit based off the suit number
    def print_symbol(self):
        if self.suit == 1:
            return"♠"
        elif self.suit == 2:
            return"♥"
        elif self.suit == 3:
            return "♦"
        elif self.suit == 4:
            return "♣"
    #draws the card information on the screen
    def draw_card(self):
        c =  self.print_symbol() +self.determine_rank(self.value) + self.print_symbol()
        return c


    #compares two cards together and returns 1 if the value is larger,0 if equal and -1 if smaller
    def compare(self,c1):
        print( self.draw_card() + " vs " + c1.draw_card()) 
        if self.value > c1.value:
            return 1
        elif self.value == c1.value:
            return 0
        else:
            return -1
        
        
        
 #object class that represents all 52 cards found in a standard deck       
class Deck:

    #constructor that takes in a list of card objects
    def __init__(self,cards):
        self.cards = cards
    
    #initates the cards paramerter with the 52 cards of a standard deck
    def make_deck(self):
        temp_card = []
       
        for x in range(4):
            for i in range(13):
                c = Card(((i+1)*(x+1)),x+1,i+1)
                temp_card.append(c)
        self.cards = temp_card
    
    #puts the cards within the card list into a random order
    def shuffle(self):
        temp_card = []
        hold = self.cards
        print(len(hold))
        while len(hold)> 0:
            c = random.choice(hold)
            temp_card.append(c)
            hold.remove(c)

        self.cards = temp_card

 #object class that represents a player within the card game war   
class Player:

    #constructor object takes in a parameter of a list of cards for their hand and their name
    def __init__(self,cards,name):
        self.cards = cards
        self.name = name

     #determines the outcome of the game, based on card length of the players hand   
    def winner(self):
        if len(self.cards) == 52:
            return 1
        elif len(self.cards) > 0:
            return 0
        else:
            return -1

    #compares the first card of a players hand to another card    
    def comp(self,c):
        return self.cards[0].compare(c)
            
     #determines the winner of a round between two players and gives the cards back to the winning player
     # if there is a tie another round will be played and winner gets all the 
     # cards from this round and previous round       
    def changing_cards(self, play):
        while self.winner() == 0 and play.winner() == 0:
            c1 = self.cards[0]
            c2 = play.cards[0]
            self.cards.remove(c1)
            print(len(self.cards))
            play.cards.remove(c2)
            if c1.compare(c2) == 1:
                self.cards.append(c2)
                self.cards.append(c1)
            
            elif c1.compare(c2) == 0:
                self.changing_cards(play)
            else:
                play.cards.append(c2)
                play.cards.append(c1)
    #return the outcome of each round in string form
    def determine_outcome(self, play):
        while self.winner() == 0 and play.winner() == 0:
            c1 = self.cards[0]
            c2 = play.cards[0]
            play.cards.remove(c2)
            if c1.compare(c2) == 1:
                return self.name +" won this round!"
            elif c1.compare(c2) == 0:
                return self.determine_outcome(play)
            else:
                return play.name +" won this round!"
                

    #return the winner of each round and how many cards each player has
    def stats(self, play):
        outcome = self.determine_outcome(play)
        info_play1 = "Player: "+ self.name + " has " +str(len(self.cards))
        info_play2 = "Player: "+ play.name + " has " +str(len(play.cards))

#object class that contains the setup and exucsions functions of the war game          
class Game:

    #constructor that takes in a deck object a list of 2 player objects
    def __init__(self,deck,players):
        self.deck = deck
        self.players = players

    #redistributes the cards from the deck parameter evenly to to players hands      
    def deal(self):
        temp_deck = self.deck.cards
        for x in self.players:
            for i in range(26):
                c = temp_deck[0]
                x.cards.append(c)
                temp_deck.remove(c)
            self.deck.cards = temp_deck

    #determines if either of the two players have met the winner parameters
    # returns a list of -1,0,1 to show the status of each player in the game  
    def winner_list(self):
        win = []
        for p in self.players:
            num = p.winner()
            if num > 0:
                win.append(p)
        return win

    #obtains starting information and the set the cards up in the replaces for game start  
    def set_up(self):
        n1 = input("what is Player 1's name: ")
        n2 = input("what is Player 2's name: ")
        p1 = Player([],n1)
        p2 = Player([],n2)
        self.players.append(p1)
        self.players.append(p2)
        self.deck.make_deck()
        self.deck.shuffle()
        self.deal()

     #initiates all surrounding functions to start and continue game play   
    def start_game(self):
        win = self.winner_list()
        game_rules = """ Welcome to Abby Johnson's War card game!
        Rules before we begin!
        -each player will start with 26 cards facing downward
        -when the round starts each player will flip over a card
        -the player who has the card with the higher value wins the round and gets both cards
        -goal to win is the get the entire deck
        - in the instance of a tie another round will be played and winner will get cards from
        both the current and previous round
        """
        print(game_rules)
        next_round = input("Are you ready to begin(True/False): ")
        while len(win) and next_round > 0:
            p1 = self.players[0]
            p2 = self.players[1]
            round_info = p1.stats(play)
            p1.changing_cards(p2)
            win = self.winner_list()
            print(round_info)
            next_round = input("are you ready for the next round(True/False): ")
                
        print(str(win[0].name)+" is the winner!")
            
                    
                
        
            
        
            
        
                   
c = Card(11,1,11)
c1 = Card(8,2,8)
c2 = Card(1,3,1)
c3 = Card(12,4,12)
#Card class testing
#determine_suit testing
assert c.determine_suit(c.suit) == "Spade"
assert c1.determine_suit(c1.suit) == "Heart"
assert c2.determine_suit(c2.suit) == "Diamond"
assert c3.determine_suit(c3.suit) == "Club"

#determine rank testing
assert c.determine_rank(c.rank) == "Jack"
assert c1.determine_rank(c1.rank) == "8"
assert c2.determine_rank(c2.rank) == "Ace"
assert c3.determine_rank(c3.rank) == "Queen"

#print symbol testing
assert c.print_symbol() == "♠"
assert c1.print_symbol() == "♥"
assert c2.print_symbol() == "♦"
assert c3.print_symbol() == "♣"

#draw_card testing
assert c.draw_card() == "♠Jack♠"
assert c1.draw_card() == "♥8♥"
assert c2.draw_card() == "♦Ace♦"
assert c3.draw_card() == "♣Queen♣"

#compare testing
c4 = Card(12,1,12)
assert c.compare(c1) == 1
assert c1.compare(c2) == 1
assert c2.compare(c1) == -1
assert c3.compare(c4) == 0

#deck testing
d = Deck([])
assert len(d.cards) == 0
#testing make deck
d.make_deck()
assert len(d.cards) == 52
assert d.cards[0].value == 1
assert d.cards[0].rank == 1
assert d.cards[0].suit == 1
d.shuffle()
assert len(d.cards) == 52

#player testing

p = Player([],"Ally")
p1 = Player([],"Ashna")
p2 = Player([c], "Abby")
p3 = Player(d.cards, "Emily")
p4 = Player([c1,c2], "Claire")
p5 = Player([c3], "Becky")
p6 = Player([c4], "Rebecca")
p7 = Player([c,c3], "Rachel")

# winner testing

assert p1.winner() == -1
assert p3.winner() == 1
assert p4.winner() == 0


#comp testing

assert p4.comp(p5.cards[0]) == -1
assert p5.comp(p6.cards[0]) == 0
assert p5.comp(p4.cards[0]) == 1
assert p4.comp(p7.cards[0]) == -1
assert p5.comp(p6.cards[0]) == 0

#determine_outcome testing
print(p4.determine_outcome(p7))

assert p4.determine_outcome(p5) == "Becky won this round!"
assert p4.determine_outcome(p7) == "Rachel won this round!"
assert len(p4.cards ) == 2

#stats testing


#changing cards testing
pp = Player([],"Ally")
pp1 = Player([],"Ashna")
pp2 = Player([c], "Abby")
pp3 = Player(d.cards, "Emily")
pp4 = Player([c1,c2], "Claire")
pp5 = Player([c3], "Becky")
pp6 = Player([c4], "Rebecca")
pp7 = Player([c,c3], "Rachel")


assert len(p4.cards) == 2
pp4.changing_cards(pp7)


assert len(pp4.cards) == 0

assert len(pp7.cards) == 4
pp5.changing_cards(pp2)
assert len(pp5.cards) == 2
assert len(pp2.cards) == 0

#game testing
d1 = Deck([])
g = Game(d1,[p1,p])
g1 = Game(d, [p1,p])

#deal testing
g1.deal()
assert len(p.cards) == 26
assert len(p1.cards) == 26

#winner list testing
d2 = Deck([])
d2.make_deck()
g2 = Game(d,[Player("abby",[c]), Player("ashna",[c1])])
g3 = Game(d, [Player(d2.cards,"emily"),p4])
assert len(g2.winner_list()) == 0
assert len(g3.winner_list()) == 1

#set up testing
deck_base = Deck([])
game_base = Game(deck_base,[])
game_base.set_up()
play = game_base.players
assert len(game_base.players) == 2
assert len(play[0].cards) == 26
assert len(play[0].cards) == 26
assert len(game_base.deck.cards) == 0

#start game testing
